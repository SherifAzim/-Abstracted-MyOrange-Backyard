// Generated by Dagger (https://dagger.dev).
package com.example.abstractmyorange.di;

import android.content.Context;
import com.example.abstractmyorange.AppActivity;
import com.example.abstractmyorange.app_di.AppComponent;
import com.example.abstractmyorange.data.remote.TariffsApi;
import com.example.abstractmyorange.data.repositories.DataSource;
import com.example.abstractmyorange.data.repositories.DataSource_Factory;
import com.example.abstractmyorange.data.repositories.TariffsRepo;
import com.example.abstractmyorange.data.repositories.TariffsRepo_Factory;
import com.example.abstractmyorange.domain.repositories.ITariffsRepo;
import com.example.abstractmyorange.domain.usecase.OffersLoadingUseCase;
import com.example.abstractmyorange.domain.usecase.OffersLoadingUseCase_Factory;
import com.example.abstractmyorange.domain.usecase.interfaces.ICostCalculationUseCase;
import com.example.abstractmyorange.domain.usecase.interfaces.IOffersLoadingUseCase;
import com.example.abstractmyorange.editrequst.EditRequestFragment;
import com.example.abstractmyorange.editrequst.EditRequestViewModel;
import com.example.abstractmyorange.editrequst.EditRequestViewModel_MembersInjector;
import com.example.abstractmyorange.editrequst.TariffCostFragment;
import com.example.abstractmyorange.editrequst.TariffCostVM;
import com.example.abstractmyorange.editrequst.TariffCostVM_MembersInjector;
import com.example.abstractmyorange.editrequst.di.CostSubComponent;
import com.example.abstractmyorange.onboarding.OrderVM;
import com.example.abstractmyorange.onboarding.OrderVM_MembersInjector;
import com.example.abstractmyorange.onboarding.di.OrderSubComponent;
import com.orange.tariffs.usecase.CostCalculationUseCase;
import com.orange.tariffs.usecase.CostCalculationUseCase_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainComponent implements MainComponent {
  private Provider<Context> getContextProvider;

  private Provider<DataSource> dataSourceProvider;

  private Provider<TariffsApi> bindTariffApiProvider;

  private Provider<TariffsRepo> tariffsRepoProvider;

  private Provider<ITariffsRepo> bindTariffRepoProvider;

  private DaggerMainComponent(AppComponent appComponentParam) {

    initialize(appComponentParam);
  }

  public static MainComponent.OrderComponentFactory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppComponent appComponentParam) {
    this.getContextProvider = new com_example_abstractmyorange_app_di_AppComponent_getContext(appComponentParam);
    this.dataSourceProvider = DataSource_Factory.create(getContextProvider);
    this.bindTariffApiProvider = DoubleCheck.provider((Provider) dataSourceProvider);
    this.tariffsRepoProvider = TariffsRepo_Factory.create(bindTariffApiProvider);
    this.bindTariffRepoProvider = DoubleCheck.provider((Provider) tariffsRepoProvider);
  }

  @Override
  public OrderSubComponent.Builder getOrderSubComponentBuilder() {
    return new OrderSubComponentBuilder();}

  @Override
  public void inject(AppActivity appActivity) {
  }

  @Override
  public CostSubComponent getCostComponent() {
    return new CostSubComponentImpl();
  }

  private static final class Factory implements MainComponent.OrderComponentFactory {
    @Override
    public MainComponent create(AppComponent appComponent) {
      Preconditions.checkNotNull(appComponent);
      return new DaggerMainComponent(appComponent);
    }
  }

  private static class com_example_abstractmyorange_app_di_AppComponent_getContext implements Provider<Context> {
    private final AppComponent appComponent;

    com_example_abstractmyorange_app_di_AppComponent_getContext(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(appComponent.getContext(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private final class CostSubComponentImpl implements CostSubComponent {
    private Provider<CostCalculationUseCase> costCalculationUseCaseProvider;

    private Provider<ICostCalculationUseCase> provideCostCalculationUseCaseProvider;

    private CostSubComponentImpl() {

      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.costCalculationUseCaseProvider = CostCalculationUseCase_Factory.create(DaggerMainComponent.this.bindTariffRepoProvider);
      this.provideCostCalculationUseCaseProvider = DoubleCheck.provider((Provider) costCalculationUseCaseProvider);
    }

    @Override
    public void inject(EditRequestViewModel arg0) {
      injectEditRequestViewModel(arg0);}

    @Override
    public void inject(TariffCostVM arg0) {
      injectTariffCostVM(arg0);}

    @Override
    public void inject(EditRequestFragment arg0) {
    }

    @Override
    public void inject(TariffCostFragment arg0) {
    }

    private EditRequestViewModel injectEditRequestViewModel(EditRequestViewModel instance) {
      EditRequestViewModel_MembersInjector.injectCostCalculationUseCase(instance, provideCostCalculationUseCaseProvider.get());
      return instance;
    }

    private TariffCostVM injectTariffCostVM(TariffCostVM instance) {
      TariffCostVM_MembersInjector.injectCostCalculationUseCase(instance, provideCostCalculationUseCaseProvider.get());
      return instance;
    }
  }

  private final class OrderSubComponentBuilder implements OrderSubComponent.Builder {
    @Override
    public OrderSubComponent build() {
      return new OrderSubComponentImpl();
    }
  }

  private final class OrderSubComponentImpl implements OrderSubComponent {
    private Provider<OffersLoadingUseCase> offersLoadingUseCaseProvider;

    private Provider<IOffersLoadingUseCase> provideOffersAndTariffsUseCaseProvider;

    private OrderSubComponentImpl() {

      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.offersLoadingUseCaseProvider = OffersLoadingUseCase_Factory.create(DaggerMainComponent.this.bindTariffRepoProvider);
      this.provideOffersAndTariffsUseCaseProvider = DoubleCheck.provider((Provider) offersLoadingUseCaseProvider);
    }

    @Override
    public void inject(OrderVM arg0) {
      injectOrderVM(arg0);}

    private OrderVM injectOrderVM(OrderVM instance) {
      OrderVM_MembersInjector.injectOfferLoadingUseCase(instance, provideOffersAndTariffsUseCaseProvider.get());
      return instance;
    }
  }
}
