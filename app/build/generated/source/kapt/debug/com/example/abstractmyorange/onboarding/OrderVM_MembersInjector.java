// Generated by Dagger (https://dagger.dev).
package com.example.abstractmyorange.onboarding;

import com.example.abstractmyorange.domain.usecase.interfaces.IOffersLoadingUseCase;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OrderVM_MembersInjector implements MembersInjector<OrderVM> {
  private final Provider<IOffersLoadingUseCase> offerLoadingUseCaseProvider;

  public OrderVM_MembersInjector(Provider<IOffersLoadingUseCase> offerLoadingUseCaseProvider) {
    this.offerLoadingUseCaseProvider = offerLoadingUseCaseProvider;
  }

  public static MembersInjector<OrderVM> create(
      Provider<IOffersLoadingUseCase> offerLoadingUseCaseProvider) {
    return new OrderVM_MembersInjector(offerLoadingUseCaseProvider);}

  @Override
  public void injectMembers(OrderVM instance) {
    injectOfferLoadingUseCase(instance, offerLoadingUseCaseProvider.get());
  }

  @InjectedFieldSignature("com.example.abstractmyorange.onboarding.OrderVM.offerLoadingUseCase")
  public static void injectOfferLoadingUseCase(OrderVM instance,
      IOffersLoadingUseCase offerLoadingUseCase) {
    instance.offerLoadingUseCase = offerLoadingUseCase;
  }
}
