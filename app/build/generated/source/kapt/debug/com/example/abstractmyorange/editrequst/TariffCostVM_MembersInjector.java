// Generated by Dagger (https://dagger.dev).
package com.example.abstractmyorange.editrequst;

import com.example.abstractmyorange.domain.usecase.interfaces.ICostCalculationUseCase;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TariffCostVM_MembersInjector implements MembersInjector<TariffCostVM> {
  private final Provider<ICostCalculationUseCase> costCalculationUseCaseProvider;

  public TariffCostVM_MembersInjector(
      Provider<ICostCalculationUseCase> costCalculationUseCaseProvider) {
    this.costCalculationUseCaseProvider = costCalculationUseCaseProvider;
  }

  public static MembersInjector<TariffCostVM> create(
      Provider<ICostCalculationUseCase> costCalculationUseCaseProvider) {
    return new TariffCostVM_MembersInjector(costCalculationUseCaseProvider);}

  @Override
  public void injectMembers(TariffCostVM instance) {
    injectCostCalculationUseCase(instance, costCalculationUseCaseProvider.get());
  }

  @InjectedFieldSignature("com.example.abstractmyorange.editrequst.TariffCostVM.costCalculationUseCase")
  public static void injectCostCalculationUseCase(TariffCostVM instance,
      ICostCalculationUseCase costCalculationUseCase) {
    instance.costCalculationUseCase = costCalculationUseCase;
  }
}
